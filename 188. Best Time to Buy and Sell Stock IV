Original Problem:
188. Best Time to Buy and Sell Stock IV
Say you have an array for which the i-th element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example 1:

Input: [2,4,1], k = 2
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: [3,2,6,5,0,3], k = 2
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

###################################################################################################
My solution 

I think a dp solution should be a better choise. but this is also a acceptable solution.

This solution might be called as 'Greedy Algorithm'? At least I call it this way.

The Algorithm is as follows:

calculate variable 'increase'. which save all the increase segment. eg[ 3,4,5,0,2,7] will be 2 increase segment 3~5 and 0~7. 'increase' save the increase segment as [startingpoint, endpoint, increasing amont). for eg above, increase = [[0,2,2],[3,5,7]].

if len(increase)>k: start to merge the increasing segment or remove one. Loop all increase[i] and increase[i]+1 pair. find the operation that loss profit the least. If remove a segment, the loss will be the increase[2]. if merge two segments, then the loss will be price[increase[i+1][1]] - price[increase[i][0]] - increase[i][2]-increase[i+1][2].

After merge or remove increase till len(increase) <=k: then the result will be the sum of all increase[i][2].

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """

        
        # find all increase segment. 
        # if all the increase segment larger than k then need to merge
        
        if prices == []:
            return 0
        if k == 0:
            return 0
        
        l = len(prices)
        if l == 1:
            return 0
        increase = []
        start = None
        end = None
        for i,p in enumerate(prices):
            if i == 0:
                if prices[0]<prices[1]:
                    start = i
            if start == None:
                if i<l-1 and prices[i] < prices[i+1]:
                    start = i
            else:
                if i<l-1 and prices[i]> prices[i+1]:
                    end = i
                    increase.append([start,end,prices[end]-prices[start]])
                    start = None
                    end = None
                if i == l-1:
                    increase.append([start,i,prices[i]-prices[start]])
        
        print(increase)

        while len(increase)>k:
            loss = float('-inf')
            condition = None
            for i in range(len(increase)-1):
                oldgain = increase[i][2]+increase[i+1][2]
                newgain = prices[increase[i+1][1]]-prices[increase[i][0]]
                if newgain>increase[i][2] and newgain > increase[i+1][2]:
                    thisloss = newgain-oldgain
                    if thisloss>loss:
                        condition = 'merge'
                        loss = thisloss
                        removepos = i
                        newincrease = [increase[i][0],increase[i+1][1],newgain]
                else:
                    if increase[i][2]>increase[i+1][2]:
                        thisloss = -increase[i+1][2]
                        if thisloss>loss:
                            condition = 'remove'
                            loss = thisloss
                            removepos = i+1
                    else:
                        thisloss = -increase[i][2]
                        if thisloss>loss:
                            condition = 'remove'
                            loss = thisloss
                            removepos = i
            if condition == 'merge':
                increase[removepos] = newincrease
                increase.pop(removepos+1)
            elif condition == 'remove':
                increase.pop(removepos)
            else:
                print('bad condition')
        print(increase)
        res = 0
        for inc in increase:
            res += inc[2]
        return res
